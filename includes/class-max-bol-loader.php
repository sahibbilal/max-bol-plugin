<?phpclass MAX_BOL_Loader {    /**     * The array of actions.     *     */    protected $actions;    /**     * The array of filters.     *     */    protected $filters;    /**     * Initialize the actions and filters.     *     */    public function __construct() {        $this->actions = array();        $this->filters = array();    }    public function add_action( $hook, $component, $callback, $priority = 10, $accepted_args = 1 ) {        $this->actions = $this->add( $this->actions, $hook, $component, $callback, $priority, $accepted_args );    }    public function add_filter( $hook, $component, $callback, $priority = 10, $accepted_args = 1 ) {        $this->filters = $this->add( $this->filters, $hook, $component, $callback, $priority, $accepted_args );    }    private function add( $max_hooks, $max_hook, $max_component, $max_callback, $max_priority, $max_accepted_args ) {        $max_hooks[] = array(            'hook'          => $max_hook,            'component'     => $max_component,            'callback'      => $max_callback,            'priority'      => $max_priority,            'accepted_args' => $max_accepted_args        );        return $max_hooks;    }    public function max_run() {        foreach ( $this->filters as $hook ) {            add_filter( $hook['hook'], array( $hook['component'], $hook['callback'] ), $hook['priority'], $hook['accepted_args'] );        }        foreach ( $this->actions as $hook ) {            add_action( $hook['hook'], array( $hook['component'], $hook['callback'] ), $hook['priority'], $hook['accepted_args'] );        }    }}